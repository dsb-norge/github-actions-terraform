name: "Run terraform test"
description: |
  Terraform test for modules.
author: "Artjoms Laivins"

inputs:
  test-file:
    description: Test file to run.
    required: true

outputs:
  exit-code:
    description: The exit code from the terraform test command.
    value: ${{ steps.run-tests.outputs.exit-code }}
  summary:
    description: Summary of the test run.
    value: ${{ steps.run-tests.outputs.summary }}
  report:
    description: Report file of the test run.
    value: ${{ steps.run-tests.outputs.report }}
  json:
    description: JSON output of the test run.
    value: ${{ steps.run-tests.outputs.json }}


runs:
  using: "composite"
  steps:
    - id: check-prereqs
      shell: bash
      run: |
        # Make sure terraform is available

        set -o allexport; source "${{ github.action_path }}/helpers.sh"; set +o allexport;

        start-group "check prerequisite: terraform binary"
        if ! command -v terraform version &>/dev/null; then
          log-error "terraform is not available on path, please install using the 'setup-terraform' action!"
          exit 1
        else
          log-info "using $(terraform version)"
        fi
        end-group

    - id: azure-login
      uses: azure/login@v2
      with:
        tenant-id: ${{ env.ARM_TENANT_ID }}
        subscription-id: ${{ env.ARM_SUBSCRIPTION_ID }}
        client-id: ${{ env.ARM_CLIENT_ID }}   

    - id: run-tests
      working-directory: ${{ github.workspace }}
      shell: bash
      continue-on-error: true
      env:
        TF_IN_AUTOMATION: true
      run: |
        set -o allexport; source "${{ github.action_path }}/helpers.sh"; set +o allexport;

        TEST_RESULT_JSON="${GITHUB_WORKSPACE}/${{ github.run_id }}-${{ inputs.test-file }}-$(date +%Y%m%d%H%M%S)-test-results.json"
        TEST_REPORT_FILE="${GITHUB_WORKSPACE}/${{ github.run_id }}-${{ inputs.test-file }}-$(date +%Y%m%d%H%M%S)-test-report.txt"
        TEST_CMD="terraform test -filter=tests/${{ inputs.test-file}} -json"

        log-info "Running test command: ${TEST_CMD}"
        start-group "'terraform test' "
        #Run test
        set -o pipefail
          
        set +e
        ${TEST_CMD} | tee ${TEST_RESULT_JSON}
        TEST_EXIT_CODE=${?}

        log-multiline "Final JSON output" "$TEST_RESULT_JSON"
        set-output "exit-code" "${TEST_EXIT_CODE}"
        set-multiline-output 'json' "${TEST_RESULT_JSON}"
        

        TEST_SUMMARY=$(jq '. | select(.type == "test_summary") | .["@message"]' ${TEST_RESULT_JSON})

        log-info "Test summary: "${TEST_SUMMARY}""
        set-output "summary" "${TEST_SUMMARY}"

        if [ "${TEST_EXIT_CODE}" == "0" ]; then
          log-info 'All tests passed! ðŸŽ‰'
          TEST_RUN_RESULT="success"
        else
          log-error "One or more tests failed, exit code: ${TEST_EXIT_CODE}"
          TEST_RUN_RESULT="failure"
          TEST_EXIT_CODE=-1
        fi

        # Creating report data. 
        declare -a  TESTS_RUNNED=()

        readarray -t TESTS_RUNNED < <(jq '. | select(.type == "test_run") | select(.test_run.progress == "complete" ) | .test_run.run' ${TEST_RESULT_JSON})

        echo "Test result for file: ${{ inputs.test-file }}" > ${TEST_REPORT_FILE}
        echo "overall result: "${TEST_RUN_RESULT}"" >> ${TEST_REPORT_FILE}
        echo "exit code: "${TEST_EXIT_CODE}"" >> ${TEST_REPORT_FILE}
        echo " " >> ${TEST_REPORT_FILE}

        echo "output: " >> ${TEST_REPORT_FILE}

        for test in "${TESTS_RUNNED[@]}"; do
          test=$(sed 's/\"//g' <<< "$test")
          RUN_STATUS=$(queryStatus $test ${TEST_RESULT_JSON})
          #RUN_STATUS=$(jq --arg test_run "$test" '. | select(.type == "test_run") | select(.test_run.run == $test_run) | select(.test_run.progress == "complete") | .test_run.status' $TEST_RESULT_JSON)
          if [ ${RUN_STATUS} == "\"error\"" ]; then
            printf 'Test: "'%s'" -----> '%s' \u274c \n' "${test}" "${RUN_STATUS}" >> ${TEST_REPORT_FILE}
            echo "See error details below: " >> ${TEST_REPORT_FILE}
            echo "  " >> ${TEST_REPORT_FILE}
            FILE=$(jq '. | select(.type == "diagnostic")| .diagnostic.range["filename"]' $TEST_RESULT_JSON)
            RESOURCE=$(jq '. | select(.type == "diagnostic")| .diagnostic["address"]' $TEST_RESULT_JSON)
            MESSAGE=$(jq '. | select(.type == "diagnostic")| .diagnostic["summary"]' $TEST_RESULT_JSON)
            echo "  | File: ${FILE}" >> ${TEST_REPORT_FILE}
            echo "  | Resource: ${RESOURCE}" >> ${TEST_REPORT_FILE}
            echo "  | Message: ${MESSAGE}" >> ${TEST_REPORT_FILE}
            echo "  " >> ${TEST_REPORT_FILE}
          elif 
            [ ${RUN_STATUS} == "\"skip\"" ]; then
            printf 'Test: "'%s'" -----> '%s' \u26a0 \n' "${test}" "${RUN_STATUS}" >> ${TEST_REPORT_FILE}
          else
            printf 'Test: "'%s'" -----> '%s' \u2705 \n' "${test}" "${RUN_STATUS}" >> ${TEST_REPORT_FILE}
          fi
        done

        printSection "Test summary for file: ${TEST_SUMMARY}" >> ${TEST_REPORT_FILE}

        set-multiline-output 'report' "${TEST_REPORT_FILE}"
          
        end-group
    
        exit ${TEST_EXIT_CODE}

    - id: upload-test-results
      uses: actions/upload-artifact@v4
      with:
        name: test-results-output-${{ inputs.test-file }}
        path: ${{ steps.run-tests.outputs.json }}

    - id: test-status
      if: ( steps.run-tests.outcome == 'failure' || steps.run-tests.outcome == 'cancelled' )
      shell: bash
      run: exit 1