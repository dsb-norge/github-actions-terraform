name: "DSB Terraform Module CI"
#
# A requirement for this workflow to run is that the following 'permissions' are granted by the calling workflow:
#   permissions:
#     id-token: write       # required for Azure password-less auth
#     contents: read        # required for actions/checkout
#     pull-requests: write  # required for commenting on PRs
#
# The following secrets must be available in the github 'secrets' context:
#   - secrets.REPO_AZURE_DSB_TENANT_ID                    <-- ID of the Azure tenant to run the workflow in context of
#   - secrets.REPO_AZURE_SUBSCRIPTION_ID                  <-- ID of the Azure subscription to run the workflow in context of
#   - secrets.REPO_AZURE_TERRAFORM_USER_SERVICE_PRINCIPAL <-- ID of the Entra ID service principal with access to the Azure subscription
#   - secrets.ORG_TF_CICD_APP_PRIVATE_KEY                 <-- generated from the app in github: https://github.com/organizations/dsb-norge/settings/apps/dsb-norge-terraform-cicd-access
#
# The following variables must be available in the github 'vars' context:
#   - vars.ORG_TF_CICD_APP_ID                             <-- app id from here: https://github.com/organizations/dsb-norge/settings/apps/dsb-norge-terraform-cicd-access
#   - vars.ORG_TF_CICD_APP_INSTALLATION_ID                <-- app installation id found in url if you "configure" the app 'dsb-norge-terraform-cicd-access' from here: https://github.com/organizations/dsb-norge/settings/installations
#
# From the calling workflow this can be achieved by either handing over all secrets:
#   secrets: inherit
# or by handing over just the required secrets from the calling workflow:
#   secrets:
#     REPO_AZURE_DSB_TENANT_ID: "secret value"
#     REPO_AZURE_SUBSCRIPTION_ID: "secret value"
#     REPO_AZURE_TERRAFORM_USER_SERVICE_PRINCIPAL: "secret value"
#
on:
  workflow_call:
    inputs:
      terraform-version:
        description: "Terraform version to use for the tests."
        required: true
        type: string
      tflint-version:
        description: "TFLint version to use for the tests."
        required: true
        type: string
      readme-file-path:
        description: |
          "README.md file path to inject terraform docs into. Default is the root of the repository."
        type: string
        default: "."

# only run one workflow at a time for the same branch or tag
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}

env:
  ARM_TENANT_ID: ${{ secrets.REPO_AZURE_DSB_TENANT_ID }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.REPO_AZURE_SUBSCRIPTION_ID }}
  ARM_CLIENT_ID: ${{ secrets.REPO_AZURE_TERRAFORM_USER_SERVICE_PRINCIPAL }}
  ARM_USE_OIDC: true
  ARM_USE_AZUREAD: true
  TF_IN_AUTOMATION: true

jobs:
  generate-docs:
    name: Update documentation
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    outputs:
      number-of-files-changed: ${{ steps.update-readme.outputs.number-of-files-changed }}
    steps:
      # need a token that will re-trigger the workflow if changes are pushed to the pr branch
      - name: "🔑 Obtain GitHub app installation access token for the terraform CI/CD app"
        id: auth
        uses: dsb-norge/github-actions/get-github-app-installation-token@v2
        with:
          github-app-id: ${{ vars.ORG_TF_CICD_APP_ID }}
          github-app-installation-id: ${{ vars.ORG_TF_CICD_APP_INSTALLATION_ID }}
          github-app-private-key: "${{ secrets.ORG_TF_CICD_APP_PRIVATE_KEY }}"

      - name: "📥 Checkout"
        id: checkout
        uses: actions/checkout@v4
        with:
          # ref is required as actions checks out in detached HEAD mode, ie. it doesn’t check out the PR branch
          ref: ${{ github.event.pull_request.head.ref }}
          # using the token that will re-trigger the workflow if changes are pushed to the pr branch
          token: ${{ steps.auth.outputs.github-token }}

      - name: "📝 Validate and update README.md"
        id: update-readme
        # TODO revert to @v2
        uses: dsb-norge/github-actions-terraform/terraform-docs@login
        with:
          readme-file-path: ${{ inputs.readme-file-path }}
        continue-on-error: true

      - name: "🧐 Validation outcome: 📝 Update docs"
        run: |
          if [ ! "${{ steps.update-readme.outcome }}" == 'success' ]; then
            echo "::error title=Update README.md failed::Outcome of update README.md step was '${{ steps.update-readme.outcome }}'!"
            exit 1
          fi
        continue-on-error: false

  create-test-matrix:
    name: Enumerate tests
    runs-on: [self-hosted, dsb-terraformer, linux, x64]
    defaults:
      run:
        shell: bash
    outputs:
      all-tests: ${{ steps.create-test-matrix.outputs.all-tests }}
    steps:
      - name: "🧹 Clean workspace"
        uses: dsb-norge/directory-recreate@v1

      - name: "⬇ Checkout working branch"
        uses: actions/checkout@v4

      - name: "🎰 Create the matrix"
        id: create-test-matrix
        # TODO revert to @v2
        uses: dsb-norge/github-actions-terraform/create-tftest-matrix@login

  # runs all validation steps but also builds up the terraform provider plugin cache
  validate-project:
    name: Validate project
    # this step is time consuming, don't bother running it if the workflow will be re-triggered by an update to the docs anyway
    needs: generate-docs
    if: (needs.generate-docs.result == 'success' && needs.generate-docs.outputs.number-of-files-changed || -1) == 0
    runs-on: [self-hosted, dsb-terraformer, linux, x64]
    defaults:
      run:
        shell: bash
    outputs:
      plugin-cache-directory: ${{ steps.setup-terraform-cache.outputs.plugin-cache-directory }}
      plugin-cache-key-monthly-rolling: ${{ steps.setup-terraform-cache.outputs.plugin-cache-key-monthly-rolling }}
    steps:
      - name: "🧹 Clean workspace"
        uses: dsb-norge/directory-recreate@v1

      - name: "⬇ Checkout working branch"
        uses: actions/checkout@v4

      - name: "📥 Setup Terraform"
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ inputs.terraform-version }}
          # woraround for extra gibberish in output https://github.com/hashicorp/setup-terraform/issues/20
          terraform_wrapper: false

      - name: "🗄️ Setup Terraform provider plugin cache"
        id: setup-terraform-cache
        # TODO revert to @v2
        uses: dsb-norge/github-actions-terraform/setup-terraform-plugin-cache@login

      - name: "📥 Setup TFLint"
        id: setup-tflint
        # TODO revert to @v2
        uses: dsb-norge/github-actions-terraform/setup-tflint@login
        with:
          tflint-version: ${{ inputs.tflint-version }}
          working-directory: ${{ github.workspace }}

      - name: "🚀 Cache Terraform provider plugins"
        uses: actions/cache@v4
        with:
          path: ${{ steps.setup-terraform-cache.outputs.plugin-cache-directory }}
          key: ${{ steps.setup-terraform-cache.outputs.plugin-cache-key-monthly-rolling }}

      - name: ⚙️ Terraform Init
        id: init
        # TODO revert to @v2
        uses: dsb-norge/github-actions-terraform/terraform-init@login
        with:
          working-directory: ${{ github.workspace }}
          additional-dirs-json: null
          plugin-cache-directory: ${{ steps.setup-terraform-cache.outputs.plugin-cache-directory }}
        continue-on-error: true # allow job to continue, step outcome is evaluated later

      - name: 🖌 Terraform Format
        id: fmt
        # TODO revert to @v2
        uses: dsb-norge/github-actions-terraform/terraform-fmt@login
        with:
          working-directory: ${{ github.workspace }}
          format-check-in-root-dir: true
        continue-on-error: true # allow job to continue, step outcome is evaluated later

      - name: ✔ Terraform Validate
        id: validate
        # TODO revert to @v2
        uses: dsb-norge/github-actions-terraform/terraform-validate@login
        with:
          working-directory: ${{ github.workspace }}
        continue-on-error: true # allow job to continue, step outcome is evaluated later

      - name: 🧹 Lint with TFLint
        id: lint
        # TODO revert to @v2
        uses: dsb-norge/github-actions-terraform/lint-with-tflint@login
        with:
          working-directory: ${{ github.workspace }}
        continue-on-error: true # allow job to continue, step outcome is evaluated later

      - name: 📝 Create validation summary
        id: create-validation-summary
        if: github.event_name == 'pull_request'
        # TODO revert to @v2
        uses: dsb-norge/github-actions-terraform/create-validation-summary@login
        with:
          environment-name: "module"
          plan-txt-output-file: ""
          status-init: ${{ steps.init.outcome }}
          status-fmt: ${{ steps.fmt.outcome }}
          status-validate: ${{ steps.validate.outcome }}
          status-lint: ${{ steps.lint.outcome }}
          status-plan: "N/A"
        continue-on-error: true # allow job to continue, step outcome is ignored

      - name: 🏷️ Add validation summary as pull request comment
        id: validation-summary-on-pr
        if: steps.create-validation-summary.outcome == 'success'
        uses: dsb-norge/github-actions/ci-cd/comment-on-pr@v2
        with:
          pr-comment-text: ${{ steps.create-validation-summary.outputs.summary }}
          delete-comments-starting-with: ${{ steps.create-validation-summary.outputs.prefix }}
        continue-on-error: true # allow job to continue, step outcome is ignored

      - name: "🧐 Validation outcome: ⚙️ Init"
        run: |
          if [ ! "${{ steps.init.outcome }}" == 'success' ]; then
            echo "::error title=Init failed::Outcome of terraform init step was '${{ steps.init.outcome }}'!"
            exit 1
          fi
        continue-on-error: false

      - name: "🧐 Validation outcome: 🖌 Format"
        run: |
          if [ ! "${{ steps.fmt.outcome }}" == 'success' ]; then
            echo "::error title=Format check failed::Outcome of terraform fmt step was '${{ steps.fmt.outcome }}'!"
            exit 1
          fi
        continue-on-error: false

      - name: "🧐 Validation outcome: ✔ Validate"
        run: |
          if [ ! "${{ steps.validate.outcome }}" == 'success' ]; then
            echo "::error title=Validate failed::Outcome of terraform validate step was '${{ steps.validate.outcome }}' !"
            exit 1
          fi
        continue-on-error: false

      - name: "🧐 Validation outcome: 🧹 TFLint"
        run: |
          if [ ! "${{ steps.lint.outcome }}" == 'success' ]; then
            echo "::error title=Lint failed::Outcome of TFLint step was '${{ steps.lint.outcome }}'!"
            exit 1
          fi
        continue-on-error: false

  module-tests:
    name: "Test"
    # requires the tests to be ran, from create-test-matrix
    # wait for provider cache to be created by validate-project
    # only run tests if all dependent jobs are successful
    #   does not run if ex validation failed or was skipped because of an update to the docs
    needs: [create-test-matrix, validate-project]
    runs-on: [self-hosted, dsb-terraformer, linux, x64]
    strategy:
      fail-fast: false # Allow jobs to continue even though one more env(s) fail
      matrix:
        test-file: ${{ fromJSON(needs.create-test-matrix.outputs.all-tests).files }}
    defaults:
      run:
        shell: bash
    steps:
      - name: "⬇ Checkout"
        uses: actions/checkout@v4

      - name: "📥 Setup Terraform"
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ inputs.terraform-version }}
          # woraround for extra gibberish in output https://github.com/hashicorp/setup-terraform/issues/20
          terraform_wrapper: false

      - name: "🚀 Cache Terraform provider plugins"
        uses: actions/cache@v4
        with:
          path: ${{ needs.validate-project.outputs.plugin-cache-directory }}
          key: ${{ needs.validate-project.outputs.plugin-cache-key-monthly-rolling }}

      - name: ⚙️ Terraform Init
        id: init
        # TODO revert to @v2
        uses: dsb-norge/github-actions-terraform/terraform-init@login
        with:
          working-directory: ${{ github.workspace }}
          additional-dirs-json: null
          plugin-cache-directory: ${{ needs.validate-project.outputs.plugin-cache-directory }}
        continue-on-error: true # allow job to continue, step outcome is evaluated later

      - name: 🧪 Terraform Test
        id: test
        # TODO revert to @v2
        uses: dsb-norge/github-actions-terraform/terraform-test@login
        with:
          test-file: ${{ matrix.test-file }}
        continue-on-error: true # allow job to continue, step outcome is evaluated later

      - name: 📝 Create test report
        id: create-test-report
        if: github.event_name == 'pull_request'
        # TODO revert to @v2
        uses: dsb-norge/github-actions-terraform/create-test-report@login
        with:
          test-out-file: ${{ steps.test.outputs.json }}
          status-init: ${{ steps.init.outcome }}
          status-test: ${{ steps.test.outcome }}
          test-summary: ${{ steps.test.outputs.summary }}
          test-report: ${{ steps.test.outputs.report }}
          test-file: ${{ matrix.test-file }}
        continue-on-error: true # allow job to continue, step outcome is evaluated later

      - name: 🏷️ Add validation summary as pull request comment
        id: validation-summary-on-pr
        if: steps.create-test-report.outcome == 'success'
        uses: dsb-norge/github-actions/ci-cd/comment-on-pr@v2
        with:
          pr-comment-text: ${{ steps.create-test-report.outputs.summary }}
          delete-comments-starting-with: ${{ steps.create-test-report.outputs.prefix }}
        continue-on-error: true # allow job to continue, step outcome is ignored

      - name: "🧐 Validation outcome: ⚙️ Init"
        run: |
          if [ ! "${{ steps.init.outcome }}" == 'success' ]; then
            echo "::error title=Init failed::Outcome of terraform init step was '${{ steps.init.outcome }}'!"
            exit 1
          fi
        continue-on-error: false

      - name: "🧐 Validation outcome: 🧪 Test"
        run: |
          if [ ! "${{ steps.test.outcome }}" == 'success' ]; then
            echo "::error title=Test failed::Outcome of terraform test step was '${{ steps.test.outcome }}' for file '${{ matrix.test-file }}'!"
            exit 1
          fi
        continue-on-error: false

  # create a global result indicating if workflow steps succeeded or not, handy for branch protection rules
  conclusion:
    if: always()
    name: "Terraform conclusion"
    needs: [generate-docs, validate-project, module-tests]
    runs-on: ubuntu-latest # no need to schedule this on our own runners
    defaults:
      run:
        shell: bash
    steps:
      # fail the workflow if any of the job was failed or cancelled
      # also fail if module-tests was skipped, ex because of an update to the docs
      - run: exit 1
        # for explanation of '>-' below see https://stackoverflow.com/a/67532120/4907315
        # job 'result': possible values are 'success', 'failure', 'cancelled', or 'skipped'
        if: >-
          ${{
               contains(needs.*.result, 'failure')
            || contains(needs.*.result, 'cancelled')
            || needs.module-tests.result == 'skipped'
          }}
