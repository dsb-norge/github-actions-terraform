name: "Create terraform test summary"
description: |
  Create comment to be added to pull request with summary of validation results and test report.
author: "Artjoms Laivins"

inputs:
  test-out-file:
    description: Path of file with test output in json format.
    required: true
  status-init:
    description: Outcome of init step.
    required: true
  status-fmt:
    description: Outcome of fmt step.
    required: true
  status-validate:
    description: Outcome of validate step.
    required: true
  status-test:
    description: Outcome of test step.
    required: true
  test-summary:
    description: Summary of test results.
    required: true
  test-report: 
    description: Report of test results.
    required: true
  status-lint:
    description: Outcome of lint step.
    required: true


outputs:
  prefix:
    description: Test summary prefix string.
    value: ${{ steps.create-test-summary.outputs.prefix }}
  summary:
    description: Test summary content string.
    value: ${{ steps.create-test-summary.outputs.summary }}

runs:
  using: "composite"
  steps:
    - id: create-test-summary
      shell: bash
      env:
        TEST_OUT_FILE: ${{ inputs.test-out-file }}
        STATUS_INIT: ${{ inputs.status-init }}
        STATUS_FMT: ${{ inputs.status-fmt }}
        STATUS_VALIDATE: ${{ inputs.status-validate }}
        STATUS_TEST: ${{ inputs.status-test }}
        TEST_SUMMARY: ${{ inputs.test-summary }}
        TEST_REPORT: ${{ inputs.test-report }}
        STATUS_LINT: ${{ inputs.status-lint }}
      run: |
        # Build pull request comment
  
        set -o allexport; source "${{ github.action_path }}/helpers.sh"; set +o allexport;
  
        log-info "creating pull request comment ..."
        COMMENT_PREFIX='### Terraform CI run summary for file: `${{ matrix.files }}`'
        COMMENT_CONTENT="${COMMENT_PREFIX}
        |  | Step | Result |
        |:---:|---|---|
        | ‚öôÔ∏è | Initialization | $([ "${STATUS_INIT}" == 'success' ] && echo "\`${STATUS_INIT}\`" || echo "<kbd>${STATUS_INIT}</kbd>") |
        | üñå | Format and Style | $([ "${STATUS_FMT}" == 'success' ] && echo "\`${STATUS_FMT}\`" || echo "<kbd>${STATUS_FMT}</kbd>") |
        | ‚úî | Validate | $([ "${STATUS_VALIDATE}" == 'success' ] && echo "\`${STATUS_VALIDATE}\`" || echo "<kbd>${STATUS_VALIDATE}</kbd>") |
        | üßπ | TFLint | $([ "${STATUS_LINT}" == 'success' ] && echo "\`${STATUS_LINT}\`" || echo "<kbd>${STATUS_LINT}</kbd>") |
        | üß™ | Tests | $([ "${STATUS_TEST}" == 'success' ] && echo "\`${STATUS_TEST}\`" || echo "<kbd>${STATUS_TEST}</kbd>") |"      

        # add icon depending on the status in test_summary contains word "success" or "failure"
        if [[ "${TEST_SUMMARY}" == *"Success!"* ]]; then
          COMMENT_SUMMARY="‚úÖ ${TEST_SUMMARY}"
        else
          COMMENT_SUMMARY="‚ùå ${TEST_SUMMARY}"
        fi

        # add test output if exists
        if [ -f "${TEST_REPORT}" ]; then
          # Cap test output at 65k characters
          TEST_OUT=$(cat "${TEST_REPORT}" | tail -c 65000 )
  
          # don't touch the indenting here
          COMMENT_CONTENT="${COMMENT_CONTENT}

        <b>Test summary: "${COMMENT_SUMMARY}"</b>
        <details><summary>Show Test Report</summary>
  
        \`\`\`terraform
        ${TEST_OUT}
        \`\`\`
        </details>"
        else
          # don't touch the indenting here
          COMMENT_CONTENT="${COMMENT_CONTENT}
  
        Test report not available ü§∑‚Äç‚ôÄÔ∏è"
        fi

        COMMENT_CONTENT="${COMMENT_CONTENT}
        
        *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Workflow: \`${GITHUB_WORKFLOW}\`*"
  
        log-info "Final validation summary prefix: ${COMMENT_PREFIX}"
        log-multiline "Final validation summary " "${COMMENT_CONTENT}"
  
        set-output 'prefix' "${COMMENT_PREFIX}"
        set-multiline-output 'summary' "${COMMENT_CONTENT}"

